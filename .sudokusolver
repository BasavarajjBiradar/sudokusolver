def is_valid(board, row, col, num):
  """
  Checks if a given number is valid in a given row, column, and 3x3 box.

  Args:
    board: A 9x9 Sudoku board.
    row: The row of the cell to check.
    col: The column of the cell to check.
    num: The number to check.

  Returns:
    True if the number is valid, False otherwise.
  """

  # Check if the number is already in the row.
  for i in range(9):
    if board[row][i] == num:
      return False

  # Check if the number is already in the column.
  for i in range(9):
    if board[i][col] == num:
      return False

  # Check if the number is already in the 3x3 box.
  box_row = row // 3
  box_col = col // 3
  for i in range(3):
    for j in range(3):
      if board[box_row * 3 + i][box_col * 3 + j] == num:
        return False

  return True


def solve_sudoku(board):
  """
  Solves a Sudoku puzzle.

  Args:
    board: A 9x9 Sudoku board.

  Returns:
    True if the puzzle is solved, False otherwise.
  """

  # Find an empty cell.
  for row in range(9):
    for col in range(9):
      if board[row][col] == 0:
        break

  # If we reach the end of the board, the puzzle is solved.
  if row == 8 and col == 8:
    return True

  # Try each possible number in the cell.
  for num in range(1, 10):
    if is_valid(board, row, col, num):
      board[row][col] = num
      if solve_sudoku(board):
        return True

      # If we reach this point, the number we tried was not valid.
      board[row][col] = 0

  # If we tried all possible numbers and none of them worked, the puzzle is
  # unsolvable.
  return False


def get_user_input():
  """
  Prompts the user for a Sudoku board and returns the board as a list of lists.
  """

  board = []
  for row in range(9):
    line = input("Enter row {}: ".format(row + 1))
    board.append([int(x) for x in line.split()])

  return board


def main():
  # Get the Sudoku board from the user.
  board = get_user_input()

  try:
    # Solve the Sudoku puzzle.
    if solve_sudoku(board):
      # Print the solved puzzle.
      for row in board:
        print(" ".join(map(str, row)))
    else:
      print("The puzzle is unsolvable.")
  except Exception as e:
    print("An error occurred:", e)


if __name__ == "__main__":
  main()
